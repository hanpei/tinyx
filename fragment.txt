// if stmt
let a =11
let b = 3
if (a-b<0) {
    // print "a < b"
    a
} else if(a - b >0) {
    //print "a > b"
    b
} else {
    print a
}


// while stmt
let a = 1
while (a<10) {
    print a
    a = a + 1
}


// while loop do not break after return value
fn count(n) {
  while (n < 10) {
    if (n == 3) return n; // <--
    print n;
    n = n + 1;
  }
}

count(1);


// closure
fn makeCounter() {
  let i = 0;
  fn count() {
    i = i + 1;
    print i;
  }
  return count;
}

let counter = makeCounter();
counter(); // "1".
counter(); // "2".


// recursion
fn fib(n) {
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}
fib(5);

fn factorial(n) {
  if (n == 1) return 1;
  return n*factorial(n - 1);
}
factorial(5); //120

//class
class Point {
    add(x, y) {
        return x + y
    }
    log(){
        print "point"
    }
}

let p = Point();

// bind this
class Cake {
  taste() {
    let adjective = "delicious";
    print "The " + this.flavor + " cake is " + adjective + "!";
  }
}

let cake = Cake();
cake.flavor = "German chocolate";
cake.taste(); // Prints "The German chocolate cake is delicious!".


class Person { 
    init(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
    }
    sum(){
        return this.x + this.y + this.z;
    }
}

let p = Person(1, 2, 3);
let q = Person(1,1,1)
p.init(3,3,3)

print p.sum()
print q.sum()


// Inheritance
class A {
  method() {
    print "A method";
  }
}

class B extends A {
  method() {
    print "B method";
  }

  test() {
    super.method();
  }
}

class C extends B {}

C().test();Æ’